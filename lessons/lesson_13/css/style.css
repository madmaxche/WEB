@import url("reset.css");
@import url("common.css");

body {
	font-family: Arial, "Helvetica Neue", Helvetica, sans-serif;
	background-color: #333;
	color: #fff;
}
.wrapper {
	overflow: clip;
	min-height: 100%;
}

/*
CSS – переходи чи CSS – transitions можуть застосовуватися 
всім елементам і навіть до псевдоэлементам. Використовуються 
для пожвавлення нашої верстки. 
Що, у свою чергу, призводить до поліпшення взаємодії з користувачем,
як правило шляхом приємної анімованої реакції на його дії. 
Наприклад – наведення та натискання на кнопку.
Також властивості transition можна використовувати для 
побудови нескладних сценаріїв анімації. Фактично,
CSS – переходи забезпечують зміну значень інших властивостей 
із певною анімацією та сценарієм.
*/
.page {
	padding: 20px;
}
.page__block {
	margin-bottom: 50px;
}

.link {
	font-size: 24px;
	color: #9acd32;
	transition: all 0.3s;
}
.link:hover {
	color: #800080;
}

.block {
	width: 150px;
	height: 150px;
}
.block__item {
	width: 150px;
	height: 150px;
	background-color: #7a956b;

	/* 1000ms = 1s */

	/*
	transition-duration
	Визначає проміжок часу, 
	протягом якого має здійснюватись перехід. 
	Власне - тут ми вказуємо час за яке 
	одне значення властивості переходить (анімується)
	в інше. Властивість не успадковується.
	*/
	/* 0.5s */
	/* transition-duration: 500ms;  */

	/*
	transition-property
	Містить назву CSS-властивостей,
	до яких буде використано ефект переходу. 
	Значення властивості може містити як одну 
	властивість, так і список властивостей 
	через кому. Властивість не успадковується.
	*/
	/* transition-property: all; */

	/*
	transition-delay
	Затримка виконання переходу. Дозволяє зробити 
	так, щоб зміна якості відбувалася не миттєво,
	а з деякою затримкою. Час затримки переходу 
	вказується у секундах або мілісекундах. 
	Властивість не успадковується.
	*/
	/* transition-delay: 0s; */

	/*
	transition-timing-function
	Задає стиль нашого переходу,
	тобто якийсь сценарій,
	за яким здійсняться анімація.
	*/
	/* transition-timing-function: cubic-bezier(0.39, -0.42, 0.47, 1.35); */

	/*
	Універсальний запис
	transition

	Порядок запису значень через пробіл:
	transition-property
	transition-duration
	transition-timing-function
	transition-delay
	*/
	/* transition: all 0.5s cubic-bezier(0.39, -0.42, 0.47, 1.35) 0s; */

	/* Декілька параметрів */
	/* transition: width 0.8s ease 0s, height 0.5s ease-in 0.8s, background-color 1s ease 1.5s; */
}
.block:hover .block__item {
	width: 200px;
	/* transform: translate(10%, 10%); */
	background-color: #77608d;
	height: 200px;

	/* transition: height 0.8s ease 0s, width 0.5s ease-in 0.8s, background-color 1s ease 1.5s; */
}

/* Приклад */
/*
.image {
	width: 300px;
	display: block;
	position: relative;
	overflow: hidden;
}

.image::before {
	content: "";
	position: absolute;
	width: 100%;
	height: 100%;
	top: 0;
	left: 0;
	background-color: #000;
	opacity: 0.2;
	transition: opacity 0.8s;
	z-index: 2;
}
.image img {
	max-width: 100%;
	transition: transform 0.8s;
}
.image:hover img {
	transform: scale(1.1);
}
.image:hover::before {
	opacity: 0;
}
*/
/* ============================================================ */

/*
CSS animation & @keyframes

Як і CSS властивість плавних переходів transition,
про яку ми говорили в попередньому уроці,
властивість animation покликана зробити нашу верстку динамічнішою,
оживити її для кращої взаємодії з 
користувачем та створення WOW ефекту. 

Але на відміну від CSS переходів,
створення анімації базується на ключових кадрах @keyframes,
які дозволяють автоматично відтворювати та повторювати 
ефекти протягом заданого часу, а також зупиняти 
анімацію за певною подією. 

Іншими словами, використання конструкції animation 
та @keyframes дозволяє нам створювати більш складні сценарії анімацій.
*/

.block-animation {
}
.block-animation__item {
	width: 150px;
	height: 150px;
	background-color: yellow;

	/*
	animation-name
	Визначає список анімацій (ключових кадрів),
	що застосовуються до елемента. Можна вказати через кому. 
	Причому пріоритет останній запис.
	*/
	/* animation-name: rotate; */

	/*
	animation-duration
	Відповідає за тривалість анімації.
	*/
	/* animation-duration: 1s; */

	/*
	animation-timing-function
	Встановлює сценарій розвитку анімації між ключовими кадрами.
	*/
	/* animation-timing-function: linear; */

	/*
	animation-iteration-count
	Відповідає за повтор відтворення ключових кадрів.
	*/
	/* animation-iteration-count: 1; */
	/*
	animation-direction
	Визначає напрямок та тип відтворення ключових кадрів.
	normal - за замовченням
	reverse -  в зворотньому напрямку
	alternate - кожна парна ітерація буде відбуватись у зворотньому напрямку
	alternate-reverse - кожна непарна ітерація буде відбуватись у зворотньому напрямку
	*/
	/* animation-direction: normal; */
	/*
	animation-play-state
	Дозволяє запускати або зупиняти анімацію за подією.
	*/
	/* animation-play-state: running; */

	/*
	animation-delay
	Відповідає за затримку перед відтворенням.
	*/
	/* animation-delay: 0s; */

	/*
	animation-fill-mode
	Визначає,
	які значення анімованих css властивостей 
	застосовуються до об'єкта після завершення анімації.
	*/
	/* animation-fill-mode: forwards; */

	/*
	Універсальний запис
	animation
	*/
	/* animation: rotate 1s linear 1 normal running 0s forwards; */

	/* Декілька анімацій */
	/* animation: rotate 1s linear 1 normal running 0s forwards, rotate-2 1s ease infinite alternate running 1s forwards; */
}

.block-animation__item:hover {
	animation-play-state: paused;
}

/* Сценарій анімації */
@keyframes rotate {
	0% {
		transform: translate(0px, 0px);
	}
	50% {
		border-radius: 50%;
	}
	100% {
		transform: translate(200px, 0px);
	}
}
@keyframes rotate-2 {
	0% {
		width: 150px;
	}
	100% {
		width: 200px;
	}
}

.car {
	width: 400px;
	height: 150px;
	background-color: #7a956b;
	border-radius: 50px 50px 0 0;
	position: relative;
	animation: car-ride 5s forwards;
}
.car::before {
	content: "";
	background-color: rgb(0, 132, 240);
	width: 100px;
	height: 100px;
	position: absolute;
	border-radius: 50px 0px 0 0;
	left: 0;
	top: 0;
}
.car::after {
	content: "";
	background-color: rgb(0, 132, 240);
	width: 50px;
	height: 100px;
	position: absolute;
	border-radius: 0px 50px 0 0;
	right: 0;
	top: 0;
}
.car__wheels {
	position: absolute;
	bottom: 20px;
	width: 100%;
	left: 0;
}
.car__wheel {
	width: 80px;
	height: 80px;
	background-color: #666;
	position: absolute;
	border-radius: 50%;
	outline: 5px dashed yellow;
	animation: car-wheels 5s linear;
}
.car__wheel:first-child {
	left: 20px;
}
.car__wheel:last-child {
	right: 20px;
}

@keyframes car-ride {
	0% {
		transform: translate(-100%, 0px);
	}
	30% {
		transform: translate(0%, 0px);
	}
	50% {
		transform: translate(0%, 0px) rotate(-10deg);
		opacity: 1;
	}
	100% {
		transform: translate(1000px, 0px);
		opacity: 0;
	}
}
@keyframes car-wheels {
	0% {
		transform: rotate(0deg);
	}
	30% {
		transform: rotate(50deg);
	}
	50% {
		transform: rotate(200deg);
	}
	100% {
		transform: rotate(360deg);
	}
}

.newton {
	width: 300px;
	margin: 0 auto;
	border-top: 10px solid #fff;
	position: relative;
	height: 300px;
}
.newton__item {
	position: absolute;
	top: -5px;
	width: 33.333%;
	height: 100%;
	transform-origin: top;
}
.newton__item::before {
	content: "";
	width: 4px;
	height: 100%;
	position: absolute;
	background-color: #666;
	left: 50%;
	transform: translate(-50%, 0px);
	border-radius: 5px;
}
.newton__item::after {
	content: "";
	width: 100px;
	height: 100px;
	border-radius: 50%;
	background-color: #000;
	position: absolute;
	bottom: 0;
	left: 0;
}

.newton__item:nth-child(1) {
	left: 0;
	animation: left-item 1s infinite ease-in alternate;
	transform: rotate(45deg);
}
.newton__item:nth-child(2) {
	left: 33.333%;
}
.newton__item:nth-child(3) {
	right: 0;
	transform: translate(0px, 0px);
	animation: right-item 1s infinite ease-out alternate;
}

@keyframes left-item {
	0% {
		transform: rotate(45deg);
	}
	50% {
		transform: rotate(0deg);
	}
	100% {
		transform: rotate(0deg);
	}
}
@keyframes right-item {
	0% {
		transform: rotate(0deg);
	}
	50% {
		transform: rotate(0deg);
	}
	100% {
		transform: rotate(-45deg);
	}
}

.clouds {
}
.clouds__item {
	display: inline-block;
	transform-origin: top;
}
.clouds__item img {
	max-width: 250px;
}
.clouds__item:first-child {
	animation: clouds 3s infinite ease-in-out alternate;
}
.clouds__item:last-child {
	animation: clouds 3.1s infinite ease-in-out alternate-reverse;
}

@keyframes clouds {
	0% {
		transform: rotate(-5deg);
	}
	100% {
		transform: rotate(5deg);
	}
}
